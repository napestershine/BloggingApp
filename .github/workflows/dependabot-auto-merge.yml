name: Dependabot Auto-Merge

'on':
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    # Only run for dependabot PRs
    if: github.actor == 'dependabot[bot]'
    
    permissions:
      contents: write
      pull-requests: write
      checks: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for rebasing
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --global user.name "dependabot-auto-merge[bot]"
        git config --global user.email "dependabot-auto-merge[bot]@users.noreply.github.com"
        
    - name: Get PR details
      id: pr-details
      run: |
        PR_NUMBER="${{ github.event.pull_request.number || github.event.number }}"
        if [ -z "$PR_NUMBER" ]; then
          # Extract PR number from different event types
          PR_NUMBER=$(echo "${{ github.event.check_suite.pull_requests[0].number || github.event.pull_request.number }}")
        fi
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        
        # Get PR info using GitHub CLI
        PR_INFO=$(gh pr view $PR_NUMBER --json title,body,headRefName,baseRefName,mergeable,state --repo ${{ github.repository }})
        echo "pr_info=$PR_INFO" >> $GITHUB_OUTPUT
        
        # Extract update type from title (patch, minor, major)
        TITLE=$(echo "$PR_INFO" | jq -r '.title')
        echo "pr_title=$TITLE" >> $GITHUB_OUTPUT
        
        # Determine update type based on common dependabot patterns
        if echo "$TITLE" | grep -iq "bump.*from.*to"; then
          if echo "$TITLE" | grep -E "([0-9]+\.){2}[0-9]+ to ([0-9]+\.){2}[0-9]+"; then
            OLD_VERSION=$(echo "$TITLE" | grep -oE "([0-9]+\.){2}[0-9]+" | head -n1)
            NEW_VERSION=$(echo "$TITLE" | grep -oE "([0-9]+\.){2}[0-9]+" | tail -n1)
            
            OLD_MAJOR=$(echo "$OLD_VERSION" | cut -d. -f1)
            NEW_MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)
            OLD_MINOR=$(echo "$OLD_VERSION" | cut -d. -f2)
            NEW_MINOR=$(echo "$NEW_VERSION" | cut -d. -f2)
            
            if [ "$OLD_MAJOR" != "$NEW_MAJOR" ]; then
              echo "update_type=major" >> $GITHUB_OUTPUT
            elif [ "$OLD_MINOR" != "$NEW_MINOR" ]; then
              echo "update_type=minor" >> $GITHUB_OUTPUT
            else
              echo "update_type=patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "update_type=unknown" >> $GITHUB_OUTPUT
          fi
        else
          echo "update_type=unknown" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check if PR can be merged
      id: check-mergeable
      run: |
        PR_INFO='${{ steps.pr-details.outputs.pr_info }}'
        MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
        STATE=$(echo "$PR_INFO" | jq -r '.state')
        
        echo "mergeable=$MERGEABLE" >> $GITHUB_OUTPUT
        echo "state=$STATE" >> $GITHUB_OUTPUT
        
        if [ "$STATE" != "OPEN" ]; then
          echo "PR is not open, skipping auto-merge"
          exit 0
        fi
        
    - name: Wait for required checks
      if: steps.check-mergeable.outputs.state == 'OPEN'
      run: |
        PR_NUMBER=${{ steps.pr-details.outputs.pr_number }}
        
        # Wait for all required status checks to complete
        echo "Waiting for required checks to complete..."
        
        MAX_WAIT=1800  # 30 minutes
        WAIT_INTERVAL=30
        ELAPSED=0
        
        while [ $ELAPSED -lt $MAX_WAIT ]; do
          # Get the latest status checks
          CHECKS=$(gh pr checks $PR_NUMBER --repo ${{ github.repository }} --json name,status,conclusion)
          
          # Check if all checks have completed
          PENDING_CHECKS=$(echo "$CHECKS" | jq '[.[] | select(.status == "in_progress" or .status == "queued")] | length')
          FAILED_CHECKS=$(echo "$CHECKS" | jq '[.[] | select(.conclusion == "failure" or .conclusion == "cancelled")] | length')
          
          echo "Pending checks: $PENDING_CHECKS, Failed checks: $FAILED_CHECKS"
          
          if [ "$PENDING_CHECKS" -eq 0 ]; then
            if [ "$FAILED_CHECKS" -eq 0 ]; then
              echo "All checks passed!"
              echo "checks_passed=true" >> $GITHUB_OUTPUT
              break
            else
              echo "Some checks failed, cannot auto-merge"
              echo "checks_passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          echo "Waiting for checks to complete... (${ELAPSED}s elapsed)"
          sleep $WAIT_INTERVAL
          ELAPSED=$((ELAPSED + WAIT_INTERVAL))
        done
        
        if [ $ELAPSED -ge $MAX_WAIT ]; then
          echo "Timeout waiting for checks to complete"
          echo "checks_passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Attempt rebase if needed
      if: steps.check-mergeable.outputs.mergeable == 'false'
      run: |
        PR_NUMBER=${{ steps.pr-details.outputs.pr_number }}
        PR_INFO='${{ steps.pr-details.outputs.pr_info }}'
        
        HEAD_REF=$(echo "$PR_INFO" | jq -r '.headRefName')
        BASE_REF=$(echo "$PR_INFO" | jq -r '.baseRefName')
        
        echo "Attempting to rebase $HEAD_REF onto $BASE_REF"
        
        # Fetch the latest changes
        git fetch origin $BASE_REF
        git fetch origin $HEAD_REF
        
        # Checkout the PR branch
        git checkout -b pr-branch origin/$HEAD_REF
        
        # Attempt rebase
        if git rebase origin/$BASE_REF; then
          echo "Rebase successful"
          
          # Push the rebased branch
          git push --force-with-lease origin pr-branch:$HEAD_REF
          
          echo "Rebased branch pushed successfully"
          
          # Wait a moment for GitHub to update the PR status
          sleep 10
        else
          echo "Rebase failed with conflicts"
          
          # Check what files have conflicts
          CONFLICT_FILES=$(git diff --name-only --diff-filter=U)
          echo "Conflicted files: $CONFLICT_FILES"
          
          # For dependency files, try automated resolution
          for file in $CONFLICT_FILES; do
            if [[ "$file" == "requirements.txt" ]] || [[ "$file" == "pubspec.yaml" ]] || [[ "$file" == "pubspec.lock" ]]; then
              echo "Attempting to resolve conflicts in $file"
              
              # For requirements.txt, prefer the version from the dependabot branch
              if [[ "$file" == "requirements.txt" ]]; then
                git checkout --theirs "$file"
              # For pubspec files, prefer the version from the dependabot branch
              elif [[ "$file" == "pubspec.yaml" ]] || [[ "$file" == "pubspec.lock" ]]; then
                git checkout --theirs "$file"
              fi
              
              git add "$file"
            fi
          done
          
          # Check if all conflicts are resolved
          if git diff --name-only --diff-filter=U | grep -q .; then
            echo "Unable to automatically resolve all conflicts"
            exit 1
          else
            echo "All conflicts resolved automatically"
            git rebase --continue
            
            # Push the resolved branch
            git push --force-with-lease origin pr-branch:$HEAD_REF
            
            echo "Conflicts resolved and pushed"
            sleep 10
          fi
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Auto-merge PR
      run: |
        PR_NUMBER=${{ steps.pr-details.outputs.pr_number }}
        UPDATE_TYPE=${{ steps.pr-details.outputs.update_type }}
        
        # Only auto-merge patch and minor updates by default
        # Major updates require manual review
        if [ "$UPDATE_TYPE" = "major" ]; then
          echo "Major version update detected. Skipping auto-merge for safety."
          
          # Add a comment explaining why it wasn't merged
          gh pr comment $PR_NUMBER --body "🚨 Major version update detected - This PR contains a major version update which may include breaking changes. Please review manually before merging. Update type: $UPDATE_TYPE" --repo ${{ github.repository }}
          
          exit 0
        fi
        
        echo "Attempting to auto-merge PR #$PR_NUMBER (Update type: $UPDATE_TYPE)"
        
        # Use squash merge for cleaner history
        if gh pr merge $PR_NUMBER --squash --auto --repo ${{ github.repository }}; then
          echo "✅ PR #$PR_NUMBER successfully auto-merged!"
        else
          echo "❌ Failed to auto-merge PR #$PR_NUMBER"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup
      if: always()
      run: |
        # Clean up any temporary branches
        git checkout main 2>/dev/null || git checkout ${{ github.event.repository.default_branch }} 2>/dev/null || true
        git branch -D pr-branch 2>/dev/null || true