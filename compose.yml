services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: blogging-app-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-blog_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-blog_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - blogging-network
    profiles:
      - dev
      - prod

  # FastAPI Backend
  api:
    build:
      context: ./python
      target: ${API_BUILD_TARGET:-prod}
      cache_from:
        - python:3.12-slim
    container_name: blogging-app-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-blog_db}}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://web:3000}
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8000/health\"); print(1)'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - blogging-network
    profiles:
      - dev
      - prod

  # Next.js Frontend
  web:
    build:
      context: ./web
      target: ${WEB_BUILD_TARGET:-runner}
      cache_from:
        - node:18-alpine
    container_name: blogging-app-web
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8000}
      - API_INTERNAL_URL=${API_INTERNAL_URL:-http://api:8000}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"const http = require('http'); const req = http.request({hostname: '0.0.0.0', port: 3000, path: '/api/health', timeout: 5000}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - blogging-network
    profiles:
      - dev
      - prod

volumes:
  postgres_data:

networks:
  blogging-network:
    driver: bridge